name: Linter

on: [push, pull_request, workflow_dispatch]

jobs:
  commitlint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v3
        id: setup-node
        with:
          node-version: '18'

      - name: Get node_modules cache
        uses: actions/cache@v3
        id: cache
        with:
          path: |
            **/node_modules
          # Adding node version as cache key
          key: ${{ runner.os }}-node_modules-${{ hashFiles('**/package-lock.json') }}-${{ steps.node.outputs.version }}

      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: npm ci --no-audit --prefer-offline --progress=false

      - name: Validate current commit (last commit) with commitlint
        if: github.event_name == 'push'
        run: npx commitlint --from ${{github.event.push.head.sha}} --to HEAD --verbose

      - name: Validate PR commits with commitlint
        if: github.event_name == 'pull_request'
        run: npx commitlint --from ${{ github.event.pull_request.head.sha }}~${{ github.event.pull_request.commits }} --to ${{ github.event.pull_request.head.sha }} --verbose
  codeql:
    runs-on: ubuntu-latest
    needs: commitlint
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: ['javascript', 'typescript']

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: ${{ matrix.language }}

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2
        with:
          category: '/language:${{matrix.language}}'
  staticlint:
    runs-on: ubuntu-latest
    needs: [commitlint, codeql]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v3
        id: setup-node
        with:
          node-version: '18'

      - name: Get node_modules cache
        uses: actions/cache@v3
        id: cache
        with:
          path: |
            **/node_modules
          # Adding node version as cache key
          key: ${{ runner.os }}-node_modules-${{ hashFiles('**/package-lock.json') }}-${{ steps.node.outputs.version }}

      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: npm ci --no-audit --prefer-offline --progress=false
      - name: Check prettier
        run: npx nx format:check --all
      - name: Check ESLinter
        run: npx nx affected -t lint
